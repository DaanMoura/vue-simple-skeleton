{"remainingRequest":"/home/alan/projects/abs/skeleton/app/node_modules/babel-loader/lib/index.js!/home/alan/projects/abs/skeleton/app/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/alan/projects/abs/skeleton/app/src/services/Auth.js","dependencies":[{"path":"/home/alan/projects/abs/skeleton/app/src/services/Auth.js","mtime":1586917353038},{"path":"/home/alan/projects/abs/skeleton/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alan/projects/abs/skeleton/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alan/projects/abs/skeleton/app/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/home/alan/projects/abs/skeleton/app/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alan/projects/abs/skeleton/app/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport Storage from '@/services/Storage';\nimport Request from '@/services/ApiRequest';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n  }\n\n  _createClass(Auth, null, [{\n    key: \"register\",\n\n    /**\n     * @param {String} value\n     * @returns {Function} Promise\n     */\n    value: function register(value) {\n      return Storage.set('storedToken', value);\n    }\n    /**\n     * @returns {Promise} Promise\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      return Storage.clear('storedToken');\n    }\n    /**\n     * @param {Object} credentials\n     * @param {Function} success\n     */\n\n  }, {\n    key: \"login\",\n    value: function login(credentials, success) {\n      return this.loginFake(credentials, success);\n      /*\n      return Request\n        .post('/auth/login', { body: credentials })\n        .then((response) =>{\n          this.register(response.token).then((success))\n        });*/\n    }\n  }, {\n    key: \"loginFake\",\n    value: function loginFake(credentials, success) {\n      this.register(Math.random().toString(36));\n      success && success();\n    }\n    /**\n     * @param {Function} success\n     */\n\n  }, {\n    key: \"logout\",\n    value: function logout(success) {\n      return this.logoutFake(success);\n      /*return this.unregister()\n        .then(() => {\n          Request.post('/auth/logout').then(success)\n        })*/\n    }\n  }, {\n    key: \"logoutFake\",\n    value: function logoutFake(success) {\n      this.unregister();\n      success && success();\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };",{"version":3,"sources":["/home/alan/projects/abs/skeleton/app/src/services/Auth.js"],"names":["Storage","Request","Auth","value","set","clear","credentials","success","loginFake","register","Math","random","toString","logoutFake","unregister"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;IAEqBC,I;;;;;;;;;;AAErB;;;;6BAIgBC,K,EAAO;AACrB,aAAOH,OAAO,CAACI,GAAR,CAAY,aAAZ,EAA0BD,KAA1B,CAAP;AACD;AACD;;;;;;iCAGoB;AAClB,aAAQH,OAAO,CAACK,KAAR,CAAc,aAAd,CAAR;AACD;AACD;;;;;;;0BAIeC,W,EAAaC,O,EAAS;AACjC,aAAO,KAAKC,SAAL,CAAeF,WAAf,EAA4BC,OAA5B,CAAP;AACF;;;;;;AAMD;;;8BAEgBD,W,EAAaC,O,EAAS;AAErC,WAAKE,QAAL,CAAcC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,CAAd;AACAL,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AAGD;AAED;;;;;;2BAGcA,O,EAAS;AACrB,aAAO,KAAKM,UAAL,CAAgBN,OAAhB,CAAP;AACA;;;;AAID;;;+BAGiBA,O,EAAS;AAEzB,WAAKO,UAAL;AACAP,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AAGD;;;;;;SAvDoBL,I","sourcesContent":["import Storage from '@/services/Storage';\nimport Request from '@/services/ApiRequest';\n\nexport default class Auth {\n\n/**\n * @param {String} value\n * @returns {Function} Promise\n */\nstatic register(value) {\n  return Storage.set('storedToken',value);\n}\n/**\n * @returns {Promise} Promise\n */\nstatic unregister() {\n  return  Storage.clear('storedToken');\n}\n/**\n * @param {Object} credentials\n * @param {Function} success\n */\n  static login(credentials, success) {\n    return this.loginFake(credentials, success);\n  /*\n  return Request\n    .post('/auth/login', { body: credentials })\n    .then((response) =>{\n      this.register(response.token).then((success))\n    });*/\n}\n\nstatic loginFake(credentials, success) {\n\n  this.register(Math.random().toString(36));\n  success && success();\n  \n  \n}\n\n/**\n * @param {Function} success\n */\nstatic logout(success) {\n  return this.logoutFake(success);\n  /*return this.unregister()\n    .then(() => {\n      Request.post('/auth/logout').then(success)\n    })*/\n}\n\n  \nstatic logoutFake(success) {\n\n  this.unregister();\n  success && success();\n  \n  \n}\n  \n}\n"]}]}