{"remainingRequest":"/home/alan/projects/mercado/vencimento/app/node_modules/babel-loader/lib/index.js!/home/alan/projects/mercado/vencimento/app/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/alan/projects/mercado/vencimento/app/src/services/Request.js","dependencies":[{"path":"/home/alan/projects/mercado/vencimento/app/src/services/Request.js","mtime":1586521538454},{"path":"/home/alan/projects/mercado/vencimento/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alan/projects/mercado/vencimento/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alan/projects/mercado/vencimento/app/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["const GET = {\n  method: 'GET'\n};\nconst PUT = {\n  method: 'PUT'\n};\nconst POST = {\n  method: 'POST'\n};\nconst DELETE = {\n  method: 'DELETE'\n};\nimport Utils from '@/utils';\nexport default class Request {\n  static QueryURL(uri, params) {\n    let url = new URL(uri);\n    let urlParams = new URLSearchParams(params).toString();\n    url.search = urlParams;\n    return url;\n  }\n\n  static async request(url, options) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (options && options.body && typeof options.body !== 'string') {\n          options.body = JSON.stringify(options.body);\n        }\n\n        let result = await fetch(url, options);\n\n        if (result.json()) {\n          resolve(result.json(), result);\n        } else {\n          resolve(result.body(), result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  /**\n  * Method to convert object into search params into the URL\n  * @param {String} url\n  * @param {Object} patams\n  * @returns the url with query params\n  */\n\n\n  mountURL(url, params) {\n    if (params && Object.keys(params.length)) {\n      url = this.QueryURL(url, params);\n    }\n\n    return url;\n  }\n  /**\n   * Fetch API wrapper for GET method\n   * @param {String} url\n   * @param {Object} params\n   * @param {Object} options \n   * @returns Promise\n   */\n\n\n  static get(url, params = {}, options = {}) {\n    return this.request(mountURL(url, params), Utils.merge(GET, options));\n  }\n  /**\n  * Fetch API wrapper for POST method\n  * @param {String} url\n  * @param {Object} options \n  * @returns Promise\n  */\n\n\n  static post(url, options = {}) {\n    return this.request(url, Utils.merge(POST, options));\n  }\n  /**\n  * Fetch API wrapper for PUT method\n  * @param {String} url\n  * @param {Object} options \n  * @returns Promise\n  */\n\n\n  static put(url, options = {}) {\n    return this.request(url, Utils.merge(PUT, options));\n  }\n  /**\n   * Fetch API wrapper for DELETE method\n   * @param {String} url\n   * @param {Object} options \n   * @returns Promise\n   */\n\n\n  static delete(url, options = {}) {\n    return this.request(url, Utils.merge(DELETE, options));\n  }\n\n}",{"version":3,"sources":["/home/alan/projects/mercado/vencimento/app/src/services/Request.js"],"names":["GET","method","PUT","POST","DELETE","Utils","Request","QueryURL","uri","params","url","URL","urlParams","URLSearchParams","toString","search","request","options","Promise","resolve","reject","body","JSON","stringify","result","fetch","json","err","mountURL","Object","keys","length","get","merge","post","put","delete"],"mappings":"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","sourcesContent":["const GET = {method:'GET'};\nconst PUT = {method:'PUT'};\nconst POST = {method:'POST'};\nconst DELETE = { method: 'DELETE' }\n\nimport Utils from '@/utils'\n\nexport default class Request {\n\n    static  QueryURL(uri, params) {\n        let url = new URL(uri);\n        let urlParams = new URLSearchParams(params).toString();\n        url.search = urlParams;\n        return url;\n       \n    }\n\n    static  async request(url, options) {\n       return new Promise(async (resolve, reject)=> {        \n           try {            \n               if (options && options.body && typeof (options.body) !== 'string') {\n                   options.body = JSON.stringify(options.body);\n                }\n                let result = await fetch(url, options);\n                if (result.json()) {\n                    resolve(result.json(), result);\n                } else {\n\n                    resolve(result.body(), result);\n                }\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n        /**\n     * Method to convert object into search params into the URL\n     * @param {String} url\n     * @param {Object} patams\n     * @returns the url with query params\n     */\n    mountURL(url, params) {\n        if (params && Object.keys(params.length)) {            \n            url = this.QueryURL(url, params);\n        }\n        return url;\n    }\n    /**\n     * Fetch API wrapper for GET method\n     * @param {String} url\n     * @param {Object} params\n     * @param {Object} options \n     * @returns Promise\n     */\n    static get(url, params = {}, options = {}) {\n        \n        return this.request(mountURL(url, params), Utils.merge(GET, options));\n    }\n        /**\n     * Fetch API wrapper for POST method\n     * @param {String} url\n     * @param {Object} options \n     * @returns Promise\n     */\n    static post(url,  options={}) {\n        return this.request(url, Utils.merge(POST, options));\n    }\n        /**\n     * Fetch API wrapper for PUT method\n     * @param {String} url\n     * @param {Object} options \n     * @returns Promise\n     */\n    static put(url,  options={}) {\n        return this.request(url, Utils.merge(PUT, options));\n    }\n    /**\n     * Fetch API wrapper for DELETE method\n     * @param {String} url\n     * @param {Object} options \n     * @returns Promise\n     */\n    static delete(url, options={}) {\n        return this.request(url, Utils.merge(DELETE, options));\n    }\n}"]}]}