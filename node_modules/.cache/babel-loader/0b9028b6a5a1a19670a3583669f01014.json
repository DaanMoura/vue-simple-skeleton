{"remainingRequest":"/home/alan/projects/mercado/vencimento/app/node_modules/babel-loader/lib/index.js!/home/alan/projects/mercado/vencimento/app/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/alan/projects/mercado/vencimento/app/src/services/Request.js","dependencies":[{"path":"/home/alan/projects/mercado/vencimento/app/src/services/Request.js","mtime":1586736263815},{"path":"/home/alan/projects/mercado/vencimento/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alan/projects/mercado/vencimento/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alan/projects/mercado/vencimento/app/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/alan/projects/mercado/vencimento/app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/home/alan/projects/mercado/vencimento/app/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alan/projects/mercado/vencimento/app/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { merge } from \"../utils/Util\";\nvar GET = {\n  method: \"GET\"\n};\nvar PUT = {\n  method: \"PUT\"\n};\nvar POST = {\n  method: \"POST\"\n};\nvar DELETE = {\n  method: \"DELETE\"\n};\n\nvar Request =\n/*#__PURE__*/\nfunction () {\n  function Request() {\n    _classCallCheck(this, Request);\n  }\n\n  _createClass(Request, null, [{\n    key: \"QueryURL\",\n    value: function QueryURL(uri, params) {\n      var url = new URL(uri);\n      var urlParams = new URLSearchParams(params).toString();\n      url.search = urlParams;\n      return url;\n    }\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(url, options) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                new Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee(resolve, reject) {\n                    var result;\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.prev = 0;\n\n                            if (options && options.body && typeof options.body !== \"string\") {\n                              options.body = JSON.stringify(options.body);\n                            }\n\n                            _context.next = 4;\n                            return fetch(url, options);\n\n                          case 4:\n                            result = _context.sent;\n                            _context.t0 = result.type;\n                            _context.next = _context.t0 === \"basic\" ? 8 : _context.t0 === \"text\" ? 8 : _context.t0 === \"json\" ? 10 : 12;\n                            break;\n\n                          case 8:\n                            resolve(result.text(), result);\n                            return _context.abrupt(\"break\", 14);\n\n                          case 10:\n                            resolve(result.json(), result);\n                            return _context.abrupt(\"break\", 14);\n\n                          case 12:\n                            resolve(result.body(), result);\n                            return _context.abrupt(\"break\", 14);\n\n                          case 14:\n                            _context.next = 19;\n                            break;\n\n                          case 16:\n                            _context.prev = 16;\n                            _context.t1 = _context[\"catch\"](0);\n                            reject(_context.t1);\n\n                          case 19:\n                            _context.prev = 19;\n                            return _context.finish(19);\n\n                          case 21:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[0, 16, 19, 21]]);\n                  }));\n\n                  return function (_x3, _x4) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function request(_x, _x2) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n    /**\n     * Method to convert object into search params into the URL\n     * @param {String} url\n     * @param {Object} patams\n     * @returns the url with query params\n     */\n\n  }, {\n    key: \"mountURL\",\n    value: function mountURL(url, params) {\n      if (params && Object.keys(params).length) {\n        url = this.QueryURL(url, params);\n      }\n\n      return url;\n    }\n    /**\n     * Fetch API wrapper for GET method\n     * @param {String} url\n     * @param {Object} params\n     * @param {Object} options\n     * @returns Promise\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(this.mountURL(url, params), merge(GET, options));\n    }\n    /**\n     * Fetch API wrapper for POST method\n     * @param {String} url\n     * @param {Object} options\n     * @returns Promise\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request(url, Utils.merge(POST, options));\n    }\n    /**\n     * Fetch API wrapper for PUT method\n     * @param {String} url\n     * @param {Object} options\n     * @returns Promise\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request(url, Utils.merge(PUT, options));\n    }\n    /**\n     * Fetch API wrapper for DELETE method\n     * @param {String} url\n     * @param {Object} options\n     * @returns Promise\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request(url, Utils.merge(DELETE, options));\n    }\n  }]);\n\n  return Request;\n}();\n\nexport { Request as default };",{"version":3,"sources":["/home/alan/projects/mercado/vencimento/app/src/services/Request.js"],"names":["merge","GET","method","PUT","POST","DELETE","Request","uri","params","url","URL","urlParams","URLSearchParams","toString","search","options","Promise","resolve","reject","body","JSON","stringify","fetch","result","type","text","json","Object","keys","length","QueryURL","request","mountURL","Utils"],"mappings":"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","sourcesContent":["import { merge } from \"../utils/Util\";\n\nconst GET = { method: \"GET\" };\nconst PUT = { method: \"PUT\" };\nconst POST = { method: \"POST\" };\nconst DELETE = { method: \"DELETE\" };\n\nexport default class Request {\n  static QueryURL(uri, params) {\n    let url = new URL(uri);\n    let urlParams = new URLSearchParams(params).toString();\n    url.search = urlParams;\n    return url;\n  }\n\n  static async request(url, options) {\n    new Promise(async (resolve, reject) => {\n        try {\n            if (options && options.body && typeof options.body !== \"string\") {\n                options.body = JSON.stringify(options.body);\n            }\n            let result = await fetch(url, options);\n            switch (result.type) {\n                case \"basic\":\n                case \"text\":\n                    resolve(result.text(), result);\n                    break;\n                case \"json\":\n                    resolve(result.json(), result);\n                    break;\n                default:\n                    resolve(result.body(), result);\n                    break;\n            }\n        } catch (err) {\n            reject(err);\n        } finally {\n         // TODO Implements here interceptor after request done\n      }\n    });\n  }\n  /**\n   * Method to convert object into search params into the URL\n   * @param {String} url\n   * @param {Object} patams\n   * @returns the url with query params\n   */\n  static mountURL(url, params) {\n    if (params && Object.keys(params).length) {\n      url = this.QueryURL(url, params);\n    }\n    return url;\n  }\n  /**\n   * Fetch API wrapper for GET method\n   * @param {String} url\n   * @param {Object} params\n   * @param {Object} options\n   * @returns Promise\n   */\n  static get(url, params = {}, options = {}) {\n    return this.request(this.mountURL(url, params), merge(GET, options));\n  }\n  /**\n   * Fetch API wrapper for POST method\n   * @param {String} url\n   * @param {Object} options\n   * @returns Promise\n   */\n  static post(url, options = {}) {\n    return this.request(url, Utils.merge(POST, options));\n  }\n  /**\n   * Fetch API wrapper for PUT method\n   * @param {String} url\n   * @param {Object} options\n   * @returns Promise\n   */\n  static put(url, options = {}) {\n    return this.request(url, Utils.merge(PUT, options));\n  }\n  /**\n   * Fetch API wrapper for DELETE method\n   * @param {String} url\n   * @param {Object} options\n   * @returns Promise\n   */\n  static delete(url, options = {}) {\n    return this.request(url, Utils.merge(DELETE, options));\n  }\n}\n"]}]}